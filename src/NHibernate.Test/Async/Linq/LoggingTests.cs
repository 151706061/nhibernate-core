//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Linq;
using NHibernate.Cfg;
using NHibernate.DomainModel.Northwind.Entities;
using NUnit.Framework;

namespace NHibernate.Test.Linq
{
	using System.Threading.Tasks;
	[TestFixture]
	public class LoggingTestsAsync : LinqTestCase
	{


		[Test]
		public async Task CanLogLinqExpressionWithoutInitializingContainedProxyAsync()
		{
			var productId = db.Products.Select(p => p.ProductId).First();

			using (var logspy = new LogSpy("NHibernate.Linq"))
			{
				var productProxy = await (session.LoadAsync<Product>(productId));
				Assert.That(NHibernateUtil.IsInitialized(productProxy), Is.False);

				var result = from product in db.Products
				             where product == productProxy
				             select product;

				Assert.That(result.Count(), Is.EqualTo(1));

				// Verify that the expected logging did happen.
				var actualLog = logspy.GetWholeLog();

				string expectedLog =
					"Expression (partially evaluated): value(NHibernate.Linq.NhQueryable`1[NHibernate.DomainModel.Northwind.Entities.Product])" +
					".Where(product => (product == Product#" + productId + ")).Count()";
				Assert.That(actualLog, Does.Contain(expectedLog));

				// And verify that the proxy in the expression wasn't initialized.
				Assert.That(NHibernateUtil.IsInitialized(productProxy), Is.False,
				            "ERROR: We expected the proxy to NOT be initialized.");
			}
		}
	}
}
