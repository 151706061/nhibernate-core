//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading;
using System.Transactions;
using NHibernate.Cfg;
using NHibernate.Driver;
using NHibernate.Engine;
using NHibernate.Linq;
using NHibernate.Test.TransactionTest;
using NHibernate.Util;
using NUnit.Framework;

namespace NHibernate.Test.SystemTransactions
{
	using System.Threading.Tasks;
	[TestFixture]
	public class SystemTransactionFixtureAsync : SystemTransactionFixtureBase
	{
		protected virtual bool AutoJoinTransaction => true;

		[Test]
		public async Task WillNotCrashOnPrepareFailureAsync()
		{
			var tx = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled);
			var disposeCalled = false;
			try
			{
				using (var s = OpenSession())
				{
					await (s.SaveAsync(new Person { NotNullData = null })); // Cause a SQL not null constraint violation.
				}

				tx.Complete();
				disposeCalled = true;
				Assert.Throws<TransactionAbortedException>(tx.Dispose, "Scope disposal has not rollback and throw.");
			}
			finally
			{
				if (!disposeCalled)
				{
					try
					{
						tx.Dispose();
					}
					catch
					{
						// Ignore, if disposed has not been called, another exception has occurred in the try and
						// we should avoid overriding it by the disposal failure.
					}
				}
			}
		}

		[Test]
		public async Task CanRollbackTransactionFromScopeAsync([Values(false, true)] bool explicitFlush)
		{
			using (new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
			using (var s = OpenSession())
			{
				await (s.SaveAsync(new Person()));

				if (explicitFlush)
					await (s.FlushAsync());
				// No Complete call for triggering rollback.
			}

			AssertNoPersons();
		}

		[Test]
		[Description("rollback inside nh-session-scope should not commit save and the transaction should be aborted.")]
		public async Task TransactionInsertWithRollBackFromScopeAsync([Values(false, true)] bool explicitFlush)
		{
			using (new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
			{
				using (var s = OpenSession())
				{
					var person = new Person();
					await (s.SaveAsync(person));

					if (explicitFlush)
						await (s.FlushAsync());
				}
				// No Complete call for triggering rollback.
			}
			AssertNoPersons();
		}

		[Test]
		[Description(@"Two session in two txscope
 (without an explicit NH transaction)
 and with a rollback in the second and a rollback outside nh-session-scope.")]
		public async Task TransactionInsertLoadWithRollBackFromScopeAsync([Values(false, true)] bool explicitFlush)
		{
			object savedId;
			var createdAt = DateTime.Today;
			using (var txscope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
			{
				using (var s = OpenSession())
				{
					var person = new Person { CreatedAt = createdAt };
					savedId = await (s.SaveAsync(person));

					if (explicitFlush)
						await (s.FlushAsync());
				}
				txscope.Complete();
			}

			using (new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
			{
				using (var s = OpenSession())
				{
					var person = await (s.GetAsync<Person>(savedId));
					person.CreatedAt = createdAt.AddMonths(-1);

					if (explicitFlush)
						await (s.FlushAsync());
				}

				// No Complete call for triggering rollback.
			}

			using (var s = OpenSession())
			using (s.BeginTransaction())
			{
				Assert.AreEqual(createdAt, (await (s.GetAsync<Person>(savedId))).CreatedAt, "Entity update was not rollback-ed.");
			}
		}

		[Test]
		public async Task CanDeleteItemAsync([Values(false, true)] bool explicitFlush)
		{
			object id;
			using (var tx = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
			{
				using (var s = OpenSession())
				{
					id = await (s.SaveAsync(new Person()));

					if (explicitFlush)
						await (s.FlushAsync());

					tx.Complete();
				}
			}

			using (var s = OpenSession())
			using (s.BeginTransaction())
			{
				Assert.AreEqual(1, await (s.Query<Person>().CountAsync()), "Entity not found in database.");
			}

			using (var tx = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
			{
				using (var s = OpenSession())
				{
					await (s.DeleteAsync(await (s.GetAsync<Person>(id))));

					if (explicitFlush)
						await (s.FlushAsync());

					tx.Complete();
				}
			}

			AssertNoPersons();
		}

		[Test]
		public async Task CanUseSessionWithManyScopesAsync([Values(false, true)] bool explicitFlush)
		{
			using (var s = WithOptions().ConnectionReleaseMode(ConnectionReleaseMode.OnClose).OpenSession())
			{
				using (var tx = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
				{
					if (!AutoJoinTransaction)
						s.JoinTransaction();
					// Acquire the connection
					var count = await (s.Query<Person>().CountAsync());
					Assert.That(count, Is.EqualTo(0), "Unexpected initial entity count.");
					tx.Complete();
				}

				using (var tx = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
				{
					if (!AutoJoinTransaction)
						s.JoinTransaction();
					await (s.SaveAsync(new Person()));

					if (explicitFlush)
						await (s.FlushAsync());

					tx.Complete();
				}

				using (var tx = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
				{
					if (!AutoJoinTransaction)
						s.JoinTransaction();
					var count = await (s.Query<Person>().CountAsync());
					Assert.That(count, Is.EqualTo(1), "Unexpected entity count after committed insert.");
					tx.Complete();
				}

				using (new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
				{
					if (!AutoJoinTransaction)
						s.JoinTransaction();
					await (s.SaveAsync(new Person()));

					if (explicitFlush)
						await (s.FlushAsync());

					// No complete for rollback-ing.
				}

				// Do not reuse the session after a rollback, its state does not allow it.
				// http://nhibernate.info/doc/nhibernate-reference/manipulatingdata.html#manipulatingdata-endingsession-commit
			}

			using (var s = OpenSession())
			{
				using (var tx = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
				{
					if (!AutoJoinTransaction)
						s.JoinTransaction();
					var count = await (s.Query<Person>().CountAsync());
					Assert.That(count, Is.EqualTo(1), "Unexpected entity count after rollback-ed insert.");
					tx.Complete();
				}
			}
		}

		[Test]
		public async Task CanUseSessionOutsideOfScopeAfterScopeAsync([Values(false, true)] bool explicitFlush)
		{
			using (var s = WithOptions().ConnectionReleaseMode(ConnectionReleaseMode.OnClose).OpenSession())
			{
				using (var tx = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
				{
					if (!AutoJoinTransaction)
						s.JoinTransaction();
					await (s.SaveAsync(new Person()));

					if (explicitFlush)
						await (s.FlushAsync());

					tx.Complete();
				}
				var count = 0;
				Assert.DoesNotThrowAsync(async () => count = await (s.Query<Person>().CountAsync()), "Failed using the session after scope.");
				if (count != 1)
					// We are not testing that here, so just issue a warning. Do not use DodgeTransactionCompletionDelayIfRequired
					// before previous assert. We want to ascertain the session is usable in any cases.
					Assert.Warn("Unexpected entity count: {0} instead of {1}. The transaction seems to have a delayed commit.", count, 1);
			}
		}

		[Test(Description = "Do not fail, but warn in case a delayed after scope disposal commit is made.")]
		public async Task DelayedTransactionCompletionAsync([Values(false, true)] bool explicitFlush)
		{
			for (var i = 1; i <= 10; i++)
			{
				// Isolation level must be read committed on the control session: reading twice while expecting some data insert
				// in between due to a late commit. Repeatable read would block and read uncommitted would see the uncommitted data.
				using (var controlSession = OpenSession())
				using (controlSession.BeginTransaction(System.Data.IsolationLevel.ReadCommitted))
				{
					// We want to have the control session as ready to query as possible, thus beginning its
					// transaction early for acquiring the connection, even if we will not use it before 
					// below scope completion.

					using (var tx = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
					{
						using (var s = OpenSession())
						{
							await (s.SaveAsync(new Person()));

							if (explicitFlush)
								await (s.FlushAsync());
						}
						tx.Complete();
					}

					var count = await (controlSession.Query<Person>().CountAsync());
					if (count != i)
					{
						Thread.Sleep(100);
						var countSecondTry = await (controlSession.Query<Person>().CountAsync());
						Assert.Warn($"Unexpected entity count: {count} instead of {i}. " +
									"This may mean current data provider has a delayed commit, occurring after scope disposal. " +
									$"After waiting, count is now {countSecondTry}. ");
						break;
					}
				}
			}
		}

		[Test]
		public async Task FlushFromTransactionAppliesToDisposedSharingSessionAsync()
		{
			var flushOrder = new List<int>();
			using (var s = OpenSession(new TestInterceptor(0, flushOrder)))
			{
				var builder = s.SessionWithOptions().Connection();

				using (var t = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
				{
					if (!AutoJoinTransaction)
						s.JoinTransaction();
					var p1 = new Person();
					var p2 = new Person();
					var p3 = new Person();
					var p4 = new Person();

					using (var s1 = builder.Interceptor(new TestInterceptor(1, flushOrder)).OpenSession())
					{
						if (!AutoJoinTransaction)
							s1.JoinTransaction();
						await (s1.SaveAsync(p1));
					}
					using (var s2 = builder.Interceptor(new TestInterceptor(2, flushOrder)).OpenSession())
					{
						if (!AutoJoinTransaction)
							s2.JoinTransaction();
						await (s2.SaveAsync(p2));
						using (var s3 = s2.SessionWithOptions().Connection().Interceptor(new TestInterceptor(3, flushOrder))
							.OpenSession())
						{
							if (!AutoJoinTransaction)
								s3.JoinTransaction();
							await (s3.SaveAsync(p3));
						}
					}
					await (s.SaveAsync(p4));
					t.Complete();
				}
			}

			Assert.That(flushOrder, Is.EqualTo(new[] { 0, 1, 2, 3 }));

			using (var s = OpenSession())
			using (var t = s.BeginTransaction())
			{
				Assert.That(await (s.Query<Person>().CountAsync()), Is.EqualTo(4));
				await (t.CommitAsync());
			}
		}

		[Test]
		public async Task FlushFromTransactionAppliesToSharingSessionAsync()
		{
			var flushOrder = new List<int>();
			using (var s = OpenSession(new TestInterceptor(0, flushOrder)))
			{
				var builder = s.SessionWithOptions().Connection();

				using (var s1 = builder.Interceptor(new TestInterceptor(1, flushOrder)).OpenSession())
				using (var s2 = builder.Interceptor(new TestInterceptor(2, flushOrder)).OpenSession())
				using (var s3 = s2.SessionWithOptions().Connection().Interceptor(new TestInterceptor(3, flushOrder)).OpenSession())
				using (var t = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
				{
					if (!AutoJoinTransaction)
					{
						s.JoinTransaction();
						s1.JoinTransaction();
						s2.JoinTransaction();
						s3.JoinTransaction();
					}
					var p1 = new Person();
					var p2 = new Person();
					var p3 = new Person();
					var p4 = new Person();
					await (s1.SaveAsync(p1));
					await (s2.SaveAsync(p2));
					await (s3.SaveAsync(p3));
					await (s.SaveAsync(p4));
					t.Complete();
				}
			}

			Assert.That(flushOrder, Is.EqualTo(new[] { 0, 1, 2, 3 }));

			using (var s = OpenSession())
			using (var t = s.BeginTransaction())
			{
				Assert.That(await (s.Query<Person>().CountAsync()), Is.EqualTo(4));
				await (t.CommitAsync());
			}
		}

		[Test]
		public async Task DoNotDeadlockOnAfterTransactionWaitAsync()
		{
			var interceptor = new AfterTransactionWaitingInterceptor();
			using (var s = WithOptions().Interceptor(interceptor).OpenSession())
			using (var tx = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
			{
				if (!AutoJoinTransaction)
					s.JoinTransaction();
				await (s.SaveAsync(new Person()));

				await (s.FlushAsync());
				tx.Complete();
			}
			Assert.That(interceptor.Exception, Is.Null);
		}

		protected override ISession OpenSession()
		{
			if (AutoJoinTransaction)
				return base.OpenSession();

			var session = Sfi.WithOptions().AutoJoinTransaction(false).OpenSession();
			if (System.Transactions.Transaction.Current != null)
				session.JoinTransaction();
			return session;
		}

		protected ISessionBuilder WithOptions()
		{
			return Sfi.WithOptions().AutoJoinTransaction(AutoJoinTransaction);
		}
	}

	[TestFixture]
	public class SystemTransactionWithoutConnectionAutoEnlistmentFixtureAsync : SystemTransactionFixtureAsync
	{
		protected override void Configure(Configuration configuration)
		{
			var connectionString = configuration.GetProperty(Cfg.Environment.ConnectionString);
			var autoEnlistmentKeyword = "Enlist";
			var autoEnlistmentKeywordPattern = autoEnlistmentKeyword;
			if (configuration.GetDerivedProperties().TryGetValue(Cfg.Environment.ConnectionDriver, out var driver) &&
				typeof(MySqlDataDriver).IsAssignableFrom(ReflectHelper.ClassForName(driver)))
			{
				autoEnlistmentKeyword = "AutoEnlist";
				autoEnlistmentKeywordPattern = "Auto ?Enlist";
			}
			// Purge any previous enlist
			connectionString = Regex.Replace(
				connectionString, $"[^;\"a-zA-Z]*{autoEnlistmentKeywordPattern}=[^;\"]*", string.Empty,
				RegexOptions.IgnoreCase | RegexOptions.Multiline);
			connectionString += $";{autoEnlistmentKeyword}=false;";
			configuration.SetProperty(Cfg.Environment.ConnectionString, connectionString);
		}

		protected override bool AppliesTo(ISessionFactoryImplementor factory)
			=> base.AppliesTo(factory) && factory.ConnectionProvider.Driver.SupportsEnlistmentWhenAutoEnlistmentIsDisabled;
	}

	[TestFixture]
	public class SystemTransactionWithoutAutoJoinTransactionAsync : SystemTransactionWithoutConnectionAutoEnlistmentFixtureAsync
	{
		protected override bool AutoJoinTransaction => false;
	}
}