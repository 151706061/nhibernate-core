//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Data;
using System.Linq;
using System.Reflection;
using System.Text;
using NHibernate.Driver;
using NHibernate.Linq;
using NHibernate.SqlTypes;
using NHibernate.Util;
using NUnit.Framework;

namespace NHibernate.Test.NHSpecificTest.NH3850
{
	using System.Threading.Tasks;
	[TestFixture]
	public class FixtureAsync : BugTestCase
	{
		private const string _searchName1 = "name";
		private const string _searchName2 = "name2";
		private readonly DateTime _testDate = DateTime.Now;
		private readonly DateTimeOffset _testDateWithOffset = DateTimeOffset.Now;

		protected override bool AppliesTo(Dialect.Dialect dialect)
		{
			return TestDialect.SupportsSqlType(new SqlType(DbType.DateTimeOffset));
		}

		protected override bool AppliesTo(Engine.ISessionFactoryImplementor factory)
		{
			// Cannot handle DbType.DateTimeOffset via ODBC.
			return !(factory.ConnectionProvider.Driver is OdbcDriver);
		}

		protected override void OnSetUp()
		{
			base.OnSetUp();
			using (var session = OpenSession())
			{
				var dateTime1 = _testDate.AddDays(-1);
				var dateTime2 = _testDate.AddDays(1);
				var dateTimeOffset1 = _testDateWithOffset.AddDays(-1);
				var dateTimeOffset2 = _testDateWithOffset.AddDays(1);
				Action<DomainClassBase> init1 = dc =>
				{
					dc.Id = 1;
					dc.Name = _searchName1;
					dc.Integer = 1;
					dc.Long = 1;
					dc.Decimal = 1;
					dc.Double = 1;
					dc.DateTime = dateTime1;
					dc.DateTimeOffset = dateTimeOffset1;
					dc.NonNullableDecimal = 1;
				};
				Action<DomainClassBase> init2 = dc =>
				{
					dc.Id = 2;
					dc.Name = _searchName2;
					dc.Integer = 2;
					dc.Long = 2;
					dc.Decimal = 2;
					dc.Double = 2;
					dc.DateTime = dateTime2;
					dc.DateTimeOffset = dateTimeOffset2;
					dc.NonNullableDecimal = 2;
				};

				DomainClassBase entity = new DomainClassBExtendedByA();
				init1(entity);
				session.Save(entity);
				entity = new DomainClassBExtendedByA();
				init2(entity);
				session.Save(entity);

				entity = new DomainClassCExtendedByD();
				init1(entity);
				session.Save(entity);
				entity = new DomainClassCExtendedByD();
				init2(entity);
				session.Save(entity);

				entity = new DomainClassE();
				init1(entity);
				session.Save(entity);
				entity = new DomainClassE();
				init2(entity);
				session.Save(entity);

				entity = new DomainClassGExtendedByH();
				init1(entity);
				session.Save(entity);
				entity = new DomainClassGExtendedByH();
				init2(entity);
				session.Save(entity);
				entity = new DomainClassHExtendingG
				{
					Id = 3,
					Name = _searchName1,
					Integer = 3,
					Long = 3,
					Decimal = 3,
					Double = 3,
					DateTime = dateTime1,
					DateTimeOffset = dateTimeOffset1,
					NonNullableDecimal = 3
				};
				session.Save(entity);
				entity = new DomainClassHExtendingG
				{
					Id = 4,
					Name = _searchName2,
					Integer = 4,
					Long = 4,
					Decimal = 4,
					Double = 4,
					DateTime = dateTime2,
					DateTimeOffset = dateTimeOffset2,
					NonNullableDecimal = 4
				};
				session.Save(entity);

				session.Flush();
			}
		}

		protected override void OnTearDown()
		{
			base.OnTearDown();
			using (var session = OpenSession())
			{
				var hql = "from System.Object";
				session.Delete(hql);
				session.Flush();
			}
		}

		// Non-reg case
		[Test]
		public Task AverageEAsync()
		{
			return AverageAsync<DomainClassE>(1.5m);
		}

		// Non-reg case
		[Test]
		public Task AverageFAsync()
		{
			return AverageAsync<DomainClassF>(null);
		}

		private Task AverageAsync<DC>(decimal? expectedResult) where DC : DomainClassBase
		{
			try
			{
				using (var session = OpenSession())
				{
					var dcQuery = session.Query<DC>();
					var integ = dcQuery.Average(dc => dc.Integer);
					Assert.AreEqual(expectedResult, integ, "Integer average has failed");
					var longInt = dcQuery.Average(dc => dc.Long);
					Assert.AreEqual(expectedResult, longInt, "Long integer average has failed");
					var dec = dcQuery.Average(dc => dc.Decimal);
					Assert.AreEqual(expectedResult, dec, "Decimal average has failed");
					var dbl = dcQuery.Average(dc => dc.Double);
					Assert.AreEqual(expectedResult, dbl, "Double average has failed");

					if (expectedResult.HasValue)
					{
						var nonNullableDecimal = -1m;
						Assert.DoesNotThrow(() => { nonNullableDecimal = dcQuery.Average(dc => dc.NonNullableDecimal); }, "Non nullable decimal average has failed");
						Assert.AreEqual(expectedResult, nonNullableDecimal, "Non nullable decimal average has failed");
					}
					else
					{
						Assert.That(() => { dcQuery.Average(dc => dc.NonNullableDecimal); },
						// After fix
						Throws.InstanceOf<InvalidOperationException>()
						// Before fix
						.Or.InnerException.InstanceOf<ArgumentNullException>(),
						"Non nullable decimal average has failed");
					}
				}
				return Task.CompletedTask;
			}
			catch (Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}

		// Failing case till NH-3850 is fixed
		[Test]
		public Task MaxBBaseAsync()
		{
			return MaxAsync<DomainClassBExtendedByA>(2);
		}

		// Failing case till NH-3850 is fixed
		[Test]
		public Task MaxCBaseAsync()
		{
			return MaxAsync<DomainClassCExtendedByD>(2);
		}

		// Non-reg case
		[Test]
		public Task MaxEAsync()
		{
			return MaxAsync<DomainClassE>(2);
		}

		// Non-reg case
		[Test]
		public Task MaxFAsync()
		{
			return MaxAsync<DomainClassF>(null);
		}

		// Failing case till NH-3850 is fixed
		[Test]
		public Task MaxGBaseAsync()
		{
			return MaxAsync<DomainClassGExtendedByH>(4);
		}

		private Task MaxAsync<DC>(int? expectedResult) where DC : DomainClassBase
		{
			try
			{
				using (var session = OpenSession())
				{
					var dcQuery = session.Query<DC>();
					var name = dcQuery.Max(dc => dc.Name);
					Assert.AreEqual(expectedResult.HasValue ? _searchName2 : null, name, "String max has failed");
					var integ = dcQuery.Max(dc => dc.Integer);
					Assert.AreEqual(expectedResult, integ, "Integer max has failed");
					var longInt = dcQuery.Max(dc => dc.Long);
					Assert.AreEqual(expectedResult, longInt, "Long integer max has failed");
					var dec = dcQuery.Max(dc => dc.Decimal);
					Assert.AreEqual(expectedResult, dec, "Decimal max has failed");
					var dbl = dcQuery.Max(dc => dc.Double);
					Assert.AreEqual(expectedResult.HasValue, dbl.HasValue, "Double max has failed");
					if (expectedResult.HasValue)
						Assert.AreEqual(expectedResult.Value, dbl.Value, 0.001d, "Double max has failed");

					var date = dcQuery.Max(dc => dc.DateTime);
					var dateWithOffset = dcQuery.Max(dc => dc.DateTimeOffset);
					if (expectedResult.HasValue)
					{
						Assert.Greater(date, _testDate, "DateTime max has failed");
						Assert.Greater(dateWithOffset, _testDateWithOffset, "DateTimeOffset max has failed");
					}
					else
					{
						Assert.Null(date, "DateTime max has failed");
						Assert.Null(dateWithOffset, "DateTimeOffset max has failed");
					}

					if (expectedResult.HasValue)
					{
						var nonNullableDecimal = -1m;
						Assert.DoesNotThrow(() => { nonNullableDecimal = dcQuery.Max(dc => dc.NonNullableDecimal); }, "Non nullable decimal max has failed");
						Assert.AreEqual(expectedResult, nonNullableDecimal, "Non nullable decimal max has failed");
					}
					else
					{
						Assert.That(() => { dcQuery.Max(dc => dc.NonNullableDecimal); },
						// After fix
						Throws.InstanceOf<InvalidOperationException>()
						// Before fix
						.Or.InnerException.InstanceOf<ArgumentNullException>(),
						"Non nullable decimal max has failed");
					}
				}
				return Task.CompletedTask;
			}
			catch (Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}

		// Failing case till NH-3850 is fixed
		[Test]
		public Task MinBBaseAsync()
		{
			return MinAsync<DomainClassBExtendedByA>(1);
		}

		// Failing case till NH-3850 is fixed
		[Test]
		public Task MinCBaseAsync()
		{
			return MinAsync<DomainClassCExtendedByD>(1);
		}

		// Non-reg case
		[Test]
		public Task MinEAsync()
		{
			return MinAsync<DomainClassE>(1);
		}

		// Non-reg case
		[Test]
		public Task MinFAsync()
		{
			return MinAsync<DomainClassF>(null);
		}

		// Non-reg case
		[Test]
		public Task MinGBaseAsync()
		{
			return MinAsync<DomainClassGExtendedByH>(1);
		}

		private Task MinAsync<DC>(int? expectedResult) where DC : DomainClassBase
		{
			try
			{
				using (var session = OpenSession())
				{
					var dcQuery = session.Query<DC>();
					var name = dcQuery.Min(dc => dc.Name);
					Assert.AreEqual(expectedResult.HasValue ? _searchName1 : null, name, "String min has failed");
					var integ = dcQuery.Min(dc => dc.Integer);
					Assert.AreEqual(expectedResult, integ, "Integer min has failed");
					var longInt = dcQuery.Min(dc => dc.Long);
					Assert.AreEqual(expectedResult, longInt, "Long integer min has failed");
					var dec = dcQuery.Min(dc => dc.Decimal);
					Assert.AreEqual(expectedResult, dec, "Decimal min has failed");
					var dbl = dcQuery.Min(dc => dc.Double);
					Assert.AreEqual(expectedResult.HasValue, dbl.HasValue, "Double min has failed");
					if (expectedResult.HasValue)
						Assert.AreEqual(expectedResult.Value, dbl.Value, 0.001d, "Double min has failed");

					var date = dcQuery.Min(dc => dc.DateTime);
					var dateWithOffset = dcQuery.Min(dc => dc.DateTimeOffset);
					if (expectedResult.HasValue)
					{
						Assert.Less(date, _testDate, "DateTime min has failed");
						Assert.Less(dateWithOffset, _testDateWithOffset, "DateTimeOffset min has failed");
					}
					else
					{
						Assert.Null(date, "DateTime min has failed");
						Assert.Null(dateWithOffset, "DateTimeOffset min has failed");
					}

					if (expectedResult.HasValue)
					{
						var nonNullableDecimal = -1m;
						Assert.DoesNotThrow(() => { nonNullableDecimal = dcQuery.Min(dc => dc.NonNullableDecimal); }, "Non nullable decimal min has failed");
						Assert.AreEqual(expectedResult, nonNullableDecimal, "Non nullable decimal min has failed");
					}
					else
					{
						Assert.That(() => { dcQuery.Min(dc => dc.NonNullableDecimal); },
						// After fix
						Throws.InstanceOf<InvalidOperationException>()
						// Before fix
						.Or.InnerException.InstanceOf<ArgumentNullException>(),
						"Non nullable decimal min has failed");
					}
				}
				return Task.CompletedTask;
			}
			catch (Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}

		// Failing case till NH-3850 is fixed
		[Test]
		public Task SumBBaseAsync()
		{
			return SumAsync<DomainClassBExtendedByA>(3);
		}

		// Failing case till NH-3850 is fixed
		[Test]
		public Task SumCBaseAsync()
		{
			return SumAsync<DomainClassCExtendedByD>(3);
		}

		// Non-reg case
		[Test]
		public Task SumEAsync()
		{
			return SumAsync<DomainClassE>(3);
		}

		// Non-reg case
		[Test]
		public Task SumFAsync()
		{
			return SumAsync<DomainClassF>(null);
		}

		// Failing case till NH-3850 is fixed
		[Test]
		public Task SumGBaseAsync()
		{
			return SumAsync<DomainClassGExtendedByH>(10);
		}

		private Task SumAsync<DC>(int? expectedResult) where DC : DomainClassBase
		{
			try
			{
				using (var session = OpenSession())
				{
					var dcQuery = session.Query<DC>();
					var integ = dcQuery.Sum(dc => dc.Integer);
					Assert.AreEqual(expectedResult, integ, "Integer sum has failed");
					var longInt = dcQuery.Sum(dc => dc.Long);
					Assert.AreEqual(expectedResult, longInt, "Long integer sum has failed");
					var dec = dcQuery.Sum(dc => dc.Decimal);
					Assert.AreEqual(expectedResult, dec, "Decimal sum has failed");
					var dbl = dcQuery.Sum(dc => dc.Double);
					Assert.AreEqual(expectedResult.HasValue, dbl.HasValue, "Double sum has failed");
					if (expectedResult.HasValue)
						Assert.AreEqual(expectedResult.Value, dbl.Value, 0.001d, "Double sum has failed");

					if (expectedResult.HasValue)
					{
						var nonNullableDecimal = -1m;
						Assert.DoesNotThrow(() => { nonNullableDecimal = dcQuery.Sum(dc => dc.NonNullableDecimal); }, "Non nullable decimal sum has failed");
						Assert.AreEqual(expectedResult, nonNullableDecimal, "Non nullable decimal sum has failed");
					}
					else
					{
						Assert.That(() => { dcQuery.Sum(dc => dc.NonNullableDecimal); },
						// After fix
						Throws.InstanceOf<InvalidOperationException>()
						// Before fix
						.Or.InnerException.InstanceOf<ArgumentNullException>(),
						"Non nullable decimal sum has failed");
					}
				}
				return Task.CompletedTask;
			}
			catch (Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}
	}
}