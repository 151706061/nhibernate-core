//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Data;
using System.Data.Common;

using NHibernate.Engine;
using NHibernate.Exceptions;
using NHibernate.Impl;
using NHibernate.SqlCommand;
using NHibernate.SqlTypes;

namespace NHibernate.Type
{
	using System.Threading.Tasks;
	using System.Threading;
	public partial class DbTimestampType : AbstractDateTimeType
	{

		/// <inheritdoc />
		public override Task<object> SeedAsync(ISessionImplementor session, CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<object>(cancellationToken);
			}
			try
			{
				if (session == null)
				{
					log.Debug("incoming session was null; using current application host time");
					return base.SeedAsync(null, cancellationToken);
				}
				if (!session.Factory.Dialect.SupportsCurrentTimestampSelection)
				{
					log.Info("falling back to application host based timestamp, as dialect does not support current timestamp selection");
					return base.SeedAsync(session, cancellationToken);
				}
				return GetCurrentTimestampAsync(session, cancellationToken);
			}
			catch (Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}

		private Task<object> GetCurrentTimestampAsync(ISessionImplementor session, CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<object>(cancellationToken);
			}
			try
			{
				Dialect.Dialect dialect = session.Factory.Dialect;
				string timestampSelectString = dialect.CurrentTimestampSelectString;
				return UsePreparedStatementAsync(timestampSelectString, session, cancellationToken);
			}
			catch (Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}

		protected virtual async Task<object> UsePreparedStatementAsync(string timestampSelectString, ISessionImplementor session, CancellationToken cancellationToken)
		{
			cancellationToken.ThrowIfCancellationRequested();
			var tsSelect = new SqlString(timestampSelectString);
			DbCommand ps = null;
			DbDataReader rs = null;
			using (new SessionIdLoggingContext(session.SessionId))
			{
				try
				{
					ps = await (session.Batcher.PrepareCommandAsync(CommandType.Text, tsSelect, EmptyParams, cancellationToken)).ConfigureAwait(false);
					rs = await (session.Batcher.ExecuteReaderAsync(ps, cancellationToken)).ConfigureAwait(false);
					await (rs.ReadAsync(cancellationToken)).ConfigureAwait(false);
					var ts = rs.GetDateTime(0);
					log.DebugFormat("current timestamp retreived from db : {0} (ticks={1})", ts, ts.Ticks);
					return ts;
				}
				catch (DbException sqle)
				{
					throw ADOExceptionHelper.Convert(
						session.Factory.SQLExceptionConverter,
						sqle,
						"could not select current db timestamp",
						tsSelect);
				}
				finally
				{
					if (ps != null)
					{
						try
						{
							session.Batcher.CloseCommand(ps, rs);
						}
						catch (DbException sqle)
						{
							log.Warn("unable to clean up prepared statement", sqle);
						}
					}
				}
			}
		}
	}
}
